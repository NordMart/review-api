name: Wait for pipelines to finish

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
    paths:
      - '.tekton/create_git_tag.yaml'

jobs:
  wait_for_pipelines:
    runs-on: ubuntu-latest

    steps:
      - name: Check if all other PR pipelines succeeded
        id: check_pipelines
        run: |
          sleep 5
          TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }})
          API_URL="https://api.github.com/repos/${{ github.repository }}/actions/runs"
          
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")

          while true; do
            # Get all workflow runs for the current PR
            RUNS=$(curl -s -X GET -G \
              -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "event=push" \
              -d "branch=${{ github.event.pull_request.head.ref }}" \
              "$API_URL")

            # Check if any other run has failed
            if echo "$RUNS" | jq -e '.workflow_runs[] | select(.id != '$GITHUB_RUN_ID' and .conclusion == "failure")' > /dev/null; then
              echo "One of the other PR pipelines failed. Failing this workflow."
              exit 1
            fi

            # Check if all runs are successful
            if ! echo "$RUNS" | jq -e '.workflow_runs[] | select(.id != '$GITHUB_RUN_ID' and .conclusion != "success")' > /dev/null; then
              echo "All other PR pipelines succeeded. Proceeding with the current workflow."
              break
            else
              echo "Not all other PR pipelines succeeded. Waiting..."
              sleep 60  # Adjust the sleep duration based on your needs
              # You can add additional waiting logic if needed
            fi
          done

      - name: Install jq
        run: sudo apt-get install jq

      - name: Get PR details
        id: pr_details
        run: |
          echo "::set-output name=pr_number::${{ github.event.pull_request.number }}"
          echo "::set-output name=base_branch::${{ github.event.pull_request.base.ref }}"
          echo "::set-output name=head_branch::${{ github.event.pull_request.head.ref }}"

      - name: Get PR Checks
        id: pr_checks
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.pr_details.outputs.pr_number }}/commits")
          checks=$(echo $response | jq -r '.[].commit.status')
          echo "::set-output name=checks::${checks}"
          echo ${checks}

      - name: Merge PR if checks pass
        if: steps.pr_checks.outputs.checks == 'success'
        run: |
          response=$(curl -s -X PUT -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.pr_details.outputs.pr_number }}/merge")
          merged=$(echo $response | jq -r '.merged')
          echo "::set-output name=merged::${merged}"

      - name: Check merge status
        if: steps.merge.outputs.merged == 'true'
        run: echo "Pull request successfully merged!"